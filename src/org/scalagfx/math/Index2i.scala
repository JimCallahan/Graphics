// Copyright 2011-2012 James Michael Callahan
// See LICENSE-2.0 file for licensing information.

package org.scalagfx.math

import java.nio._

//--------------------------------------------------------------------------------------------------
//   I N D E X   2 I  
//--------------------------------------------------------------------------------------------------

/** Companion object for Index2i. */
object Index2i 
{
  //------------------------------------------------------------------------------------------------
  //   C R E A T I O N                                                                     
  //------------------------------------------------------------------------------------------------

  /** Create a new vector from components. */
  def apply(x: Int, y: Int) = 
    new Index2i(x, y)

  /** Create a new vector in which all components are the same scalar value. */ 
  def apply(s: Int) = 
    new Index2i(s, s) 
 

  /** A zero length vector. */
  val zero: Index2i = 
    Index2i(0)

  /** A vector with all components equal to (1). */
  val one: Index2i = 
    Index2i(1)


  /** A unit length vector along the X-axis. */ 
  val unitX: Index2i = 
    Index2i(1, 0)

  /** A unit length vector along the Y-axis. */ 
  val unitY: Index2i = 
    Index2i(0, 1)
  

  //------------------------------------------------------------------------------------------------
  //   C O M P A R I S O N                                                                  
  //------------------------------------------------------------------------------------------------

  /** The component-wise minimum of two vectors. */
  def min(a: Index2i, b: Index2i): Index2i = 
    compwise(a, b, scala.math.min(_, _)) 
  
  /** The component-wise maximum of two vectors. */
  def max(a: Index2i, b: Index2i): Index2i = 
    compwise(a, b, scala.math.max(_, _)) 
  			
  
  //------------------------------------------------------------------------------------------------
  //   U T I L I T Y                                                                        
  //------------------------------------------------------------------------------------------------

  /** Create a vector who's components are generated by applying the given binary operator
    * to each of the corresponding components of the given two vectors. */ 
  def compwise(a: Index2i, b: Index2i, f: (Int, Int) => Int): Index2i = 
    Index2i(f(a.x, b.x), f(a.y, b.y))
}

/** An immutable 2-dimensional vector of Int element type used to represent cell indices of a 
  * regular subdivision of space (voxels). */ 
class Index2i(val x: Int, val y: Int) 
{
  //------------------------------------------------------------------------------------------------
  //   C O M P O N E N T   O P S                                                            
  //------------------------------------------------------------------------------------------------

  /** A copy of this vector in which the X component has been replaced with the given
    * value. */ 
  def newX(v: Int): Index2i = 
    Index2i(v, y)
  
  /** A copy of this vector in which the Y component has been replaced with the given
    * value. */ 
  def newY(v: Int): Index2i = 
    Index2i(x, v)
  
  /** A copy of this vector in which the component with the given index as been replaced. */
  def newComp(i: Int, v: Int) = 
    i match {
      case 0 => Index2i(v, y)
      case 1 => Index2i(x, v)
      case _ => throw new IllegalArgumentException("Invalid index (" + i + ")!")
    }
  

  //------------------------------------------------------------------------------------------------
  //   U N A R Y   O P S                                                                    
  //------------------------------------------------------------------------------------------------

  /** The number of dimensions. */
  val dimens = 2

  /** A vector of identical magnitude but opposite direction. */
  def negated: Index2i = Index2i(-x, -y)

  /** A vector in which X and Y components have been swapped. */ 
  def swapped: Index2i = Index2i(y, x)

  /** Get the minimum valued component. */
  def minComp: Int = 
    if(x < y) x else y

  /** Get the maximum valued component. */
  def maxComp: Int = 
    if(x > y) x else y
  
  /** A vector who's components are the absolute value of the corresponding components of
    * this vector. */ 
  def abs: Index2i = 
    map(scala.math.abs _) 
  			

  //------------------------------------------------------------------------------------------------
  //   O P E R A T O R S                                                                    
  //------------------------------------------------------------------------------------------------

  /** The addition of a scalar value to all components of this vector. */ 
  def + (scalar: Int): Index2i = Index2i(x+scalar, y+scalar) 

  /** The component-wise addition of another vector with this vector. */ 
  def + (that: Index2i): Index2i = Index2i(x+that.x, y+that.y)
  

  /** The subtraction of a scalar value to all components of this vector. */ 
  def - (scalar: Int): Index2i = Index2i(x-scalar, y-scalar)
  
  /** The component-wise subtraction of another vector from this vector. */ 
  def - (that: Index2i): Index2i = Index2i(x-that.x, y-that.y)


  /** The product of a scalar value with all components of this vector. */ 
  def * (scalar: Int): Index2i = Index2i(x*scalar, y*scalar)

  /** The component-wise multiplication of another vector with this vector. */ 
  def * (that: Index2i): Index2i = Index2i(x*that.x, y*that.y)


  /** The dot-product of this and another vector. */
  def dot(that: Index2i): Int = 
    x*that.x + y*that.y
  

  //------------------------------------------------------------------------------------------------
  //   C O M P A R I S O N                                                                  
  //------------------------------------------------------------------------------------------------

  /** Compares this vector to the specified value for equality. */
  override def equals(that: Any): Boolean = 
    that match {
      case that: Index2i => 
        (that canEqual this) && (x == that.x) && (y == that.y)
      case _ => false
    }

  /** A method that should be called from every well-designed equals method that is open
    * to be overridden in a subclass. */
  def canEqual(that: Any): Boolean = 
    that.isInstanceOf[Index2i]

  /** Returns a hash code value for the object. */
  override def hashCode: Int = 
    43 * (41 + x.##) + y.##

  //------------------------------------------------------------------------------------------------

  /** Are any of the components of this vector less-than the corresponding component of the
    * given vector. */
  def anyLt(that: Index2i): Boolean = 
    forany(that)(_ < _) 

  /** Are any of the components of this vector less-than or equal the corresponding
    * component of the given vector. */
  def anyLte(that: Index2i): Boolean = 
    forany(that)(_ <= _) 

  /** Are any of the components of this vector greater-than the corresponding component of
    * the given vector. */
  def anyGt(that: Index2i): Boolean = 
    forany(that)(_ > _) 

  /** Are any of the components of this vector greater-than or equal the corresponding
    * component of the given vector. */
  def anyGte(that: Index2i): Boolean = 
    forany(that)(_ >= _) 

  //------------------------------------------------------------------------------------------------

  /** Are all of the components of this vector less-than the corresponding component of the
    * given vector. */
  def allLt(that: Index2i): Boolean = 
    forall(that)(_ < _) 

  /** Are all of the components of this vector less-than or equal the corresponding component
    * of the given vector. */
  def allLte(that: Index2i): Boolean = 
    forall(that)(_ <= _) 

  /** Are all of the components of this vector greater-than the corresponding
    * component of the given vector. */
  def allGt(that: Index2i): Boolean = 
    forall(that)(_ > _) 

  /** Are all of the components of this vector greater-than or equal the corresponding
    * component of the given vector. */
  def allGte(that: Index2i): Boolean = 
    forall(that)(_ >= _) 


  //------------------------------------------------------------------------------------------------
  //   U T I L I T Y                                                                       
  //------------------------------------------------------------------------------------------------

  /** The vector component at the given index. */
  def apply(i: Int): Int = 
    i match {
      case 0 => x
      case 1 => y
      case _ => throw new IllegalArgumentException("Invalid index (" + i + ")!")
    }

  /** Tests whether the given predicate holds true for all components of this vector. */ 
  def forall(p: (Int) => Boolean): Boolean = 
    p(x) && p(y)

  /** Tests whether the given predicate holds true for all of the corresponding components
    * of this and the given vector. */ 
  def forall(that: Index2i)(p: (Int, Int) => Boolean): Boolean = 
    p(x, that.x) && p(y, that.y)


  /** Tests whether the given predicate holds true for any component of this vector. */ 
  def forany(p: (Int) => Boolean): Boolean = 
    p(x) || p(y)

  /** Tests whether the given predicate holds true for any of the corresponding components
    * of this and the given vector. */ 
  def forany(that: Index2i)(p: (Int, Int) => Boolean): Boolean = 
    p(x, that.x) || p(y, that.y)

  /** Applies a function to all components of this vector.
   *
   * @param f  The function that is applied for its side-effect to every component.  */
  def foreach(f: (Int) => Unit): Unit = { 
    f(x); f(y)
  }

  /** Builds a new vector by applying a function to each component of this vector. */
  def map(f: (Int) => Int): Index2i = 
    Index2i(f(x), f(y))

  /** Applies a binary operator to a start value and all components of this vector, going
    * left to right. */
  def foldLeft[A](start: A)(f: (A, Int) => A): A = 
    f(f(start, x), y)

  /** Applies a binary operator to a start value and all components of this vector, going
    * left to right. */
  def /: [A](start: A)(f: (A, Int) => A): A = 
    foldLeft(start)(f)

  /** Applies a binary operator to a start value and all components of this vector,
    * going right to left. */
  def foldRight[A](start: A)(f: (Int, A) => A): A = 
    f(x, f(y, start))

  /** Applies a binary operator to a start value and all components of this index,
    * going right to left. */
  def :\ [A](start: A)(f: (Int, A) => A): A = 
    foldRight(start)(f)

  /** Reduces the components of this index using the specified associative binary operator. */
  def reduce(f: (Int, Int) => Int): Int = 
    f(x, y)


  //------------------------------------------------------------------------------------------------
  //   C O N V E R S I O N                                                                  
  //------------------------------------------------------------------------------------------------

  /** Convert to a list of components. */ 
  def toList: List[Int] = List(x, y) 

  /** Convert to an array of components. */ 
  def toArray: Array[Int] = Array(x, y) 

  /** Convert to a 4-dimensional homogeneous vector. */ 
  def toVector4d: Vector4d = Vector4d(x.toDouble, y.toDouble, 0.0, 1.0) 

  /** Convert to a 3-dimensional vector. */ 
  def toVector3d: Vector3d = Vector3d(x.toDouble, y.toDouble, 0.0) 

  /** Convert to a 3-dimensional vector. */ 
  def toVector2d: Vector2d = Vector2d(x.toDouble, y.toDouble) 

  /** Convert to a vector from the origin to a this position. */ 
  def toVec3d: Vec3d = Vec3d(x.toDouble, y.toDouble, 0.0) 

  /** Convert to a vector from the origin to this position. */ 
  def toVec2d: Vec2d = Vec2d(x.toDouble, y.toDouble) 

  /** Convert to a 3-dimensional position. */ 
  def toPos3d: Pos3d = Pos3d(x.toDouble, y.toDouble, 0.0) 

  /** Convert to a 2-dimension.toDoubleal position. */ 
  def toPos2d: Pos2d = Pos2d(x.toDouble, y.toDouble) 

  /** Convert to a 3-dimensional index. */ 
  def toIndex3i: Index3i = Index3i(x.toInt, y.toInt, 0)

  /** Convert to a 2-dimensional index. */ 
  def toIndex2i: Index2i = this

  /** Convert to a native array. */
  def toNative: IntBuffer = {
    val buf = ByteBuffer.allocateDirect(2 << 2).order(ByteOrder.nativeOrder).asIntBuffer
    putNative(buf)
    buf.rewind
    buf
  }

  /** Add the component values from this vector starting at the current buffer position to the
    * given native array. */ 
  def putNative(buf: IntBuffer) {
    buf.put(x); buf.put(y)
  }

  /** Convert to a native array of shorts. */
  def toNativeShorts: ShortBuffer = {
    val buf = ByteBuffer.allocateDirect(2 << 1).order(ByteOrder.nativeOrder).asShortBuffer
    putNativeShorts(buf)
    buf.rewind
    buf
  }

  /** Add the component values from this vector starting at the current buffer position to the
    * given native array of shorts. */ 
  def putNativeShorts(buf: ShortBuffer) {
    buf.put(x.toShort); buf.put(y.toShort)
  }

  /** Convert to a string representation. */
  override def toString() = 
    "Index2i(%d, %d)".format(x, y)
}

